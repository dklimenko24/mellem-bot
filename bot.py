import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ----- –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
TOKEN = os.getenv("BOT_TOKEN")  # –í Railway: Shared Variables -> BOT_TOKEN = 7283570898:AAH28...
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

# ----- –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä -----
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ----- –û–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è -----
class OrderState(StatesGroup):
    waiting_for_material = State()
    waiting_for_size = State()

# ----- –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ /start -----
@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¶ –ö–µ—Ä–∞–º–∏–∫–∞", callback_data="material_keramika")],
        [InlineKeyboardButton(text="üü® –ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ (–æ–≤–∞–ª)", callback_data="material_metal_oval")],
        [InlineKeyboardButton(text="üü• –ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è)", callback_data="material_metal_pryam")],
        [InlineKeyboardButton(text="üî∑ –°–≤–æ—è —Ñ–æ—Ä–º–∞", callback_data="material_custom")]
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ñ–æ—Ç–æ–∫–µ—Ä–∞–º–∏–∫—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è:", 
        reply_markup=keyboard
    )
    await state.set_state(OrderState.waiting_for_material)

# ----- –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ -----
@dp.callback_query(lambda c: c.data.startswith("material_"))
async def material_chosen(callback: types.CallbackQuery, state: FSMContext):
    material = callback.data.replace("material_", "")
    await state.update_data(material=material)
    await callback.answer()
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {material}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13x18, 18x24 –∏ —Ç.–¥.):"
    )
    await state.set_state(OrderState.waiting_for_size)

# ----- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∂–¥—ë–º —Ä–∞–∑–º–µ—Ä -----
@dp.message(OrderState.waiting_for_size)
async def set_size(message: types.Message, state: FSMContext):
    size_text = message.text
    data = await state.get_data()
    chosen_material = data.get("material", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
    await state.update_data(size=size_text)
    
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª: {chosen_material}, —Ä–∞–∑–º–µ—Ä: {size_text}\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–æ–≥–∏–∫—É: –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å, —Ñ–æ–Ω, —Ñ–æ—Ç–æ –∏ —Ç.–¥."
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–ª–∏ —Å—Ç–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–µ–µ) 
    await state.clear()

# ----- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ -----
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
