import os
import math
import asyncio
import logging
import requests  # <-- –Ω—É–∂–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GitHub API

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –°–û–°–¢–û–Ø–ù–ò–Ø ---
class OrderState(StatesGroup):
    waiting_for_material = State()
    waiting_for_size = State()
    waiting_for_format = State()
    waiting_for_font = State()

# --- –ü–ê–ü–ö–ê, –û–¢–ö–£–î–ê –ë–ï–†–Å–ú –®–†–ò–§–¢–´ ---
OWNER = "dklimenko24"
REPO = "mellem-bot"
FOLDER_PATH = "font_examples"  # –ø–∞–ø–∫–∞ —Å 32 –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
BRANCH = "main"

# --- –¶–ï–ù–´ (–æ–ø—Ç–æ–≤—ã–µ) ---
KERAMIKA_PRICES = {
    "13x18": 1100, "15x20": 1400, "18x24": 2000, "20x30": 2700,
    "24x30": 3300, "30x40": 5000, "40x50": 13000, "40x60": 13300,
    "50x70": 17200, "50x90": 27000, "50x100": 32000, "60x20": 44000,
}

METAL_OVAL_PRICES = {
    "13x18": 850, "14x25": 950, "16x23": 1000, "18x24": 1100,
    "20x30": 1500, "24x30": 1700, "25x40": 2600, "30x40": 3500,
}

METAL_PRYAM_PRICES = {
    "13x18": 850, "15x20": 1050, "18x24": 1150, "20x30": 1550,
    "24x30": 1750, "30x40": 3600, "40x50": 14000,
}

# --- 1) –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –®–†–ò–§–¢–û–í –° RAW-–°–°–´–õ–ö–ê–ú–ò ---
def get_font_urls():
    """
    –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ GitHub API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å { "–∏–º—è_—Ñ–∞–π–ª–∞": "raw_url", ... }
    """
    api_url = f"https://api.github.com/repos/{OWNER}/{REPO}/contents/{FOLDER_PATH}?ref={BRANCH}"
    resp = requests.get(api_url)
    if resp.status_code != 200:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GitHub API: {resp.status_code} {resp.text}")
        return {}

    data = resp.json()
    font_urls = {}
    for file_info in data:
        if file_info["type"] == "file":
            # download_url –¥–∞—ë—Ç –ø—Ä—è–º—É—é (raw) —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
            filename = file_info["name"]  # –Ω–∞–ø—Ä–∏–º–µ—Ä "A (10).jpg"
            raw_url = file_info["download_url"]
            font_urls[filename] = raw_url
    return font_urls

# --- 2) –ì—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –≤ –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑) ---
FONTS = get_font_urls()

# --- –ü–û–î–°–ß–Å–¢ –†–û–ó–ù–ò–ß–ù–û–ô –¶–ï–ù–´ ---
def calculate_retail_price(wholesale_price: int) -> int:
    return math.floor(wholesale_price * 1.3 / 50) * 50

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def create_size_keyboard(prices: dict) -> InlineKeyboardMarkup:
    rows = []
    for size, price in prices.items():
        text = f"{size} ‚Äì {calculate_retail_price(price)} —Ä—É–±."
        rows.append([InlineKeyboardButton(text=text, callback_data=f"size_{size}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def format_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñº –ü–æ—Ä—Ç—Ä–µ—Ç —Å –Ω–∞–¥–ø–∏—Å—å—é", callback_data="format_with_text")],
        [InlineKeyboardButton(text="üñº –ü–æ—Ä—Ç—Ä–µ—Ç –±–µ–∑ –Ω–∞–¥–ø–∏—Å–∏", callback_data="format_without_text")],
        [InlineKeyboardButton(text="üî§ –¢–æ–ª—å–∫–æ –Ω–∞–¥–ø–∏—Å—å", callback_data="format_text_only")],
    ])

# --- –•–ï–ù–î–õ–ï–†–´ ---

# /start
async def cmd_start(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¶ –ö–µ—Ä–∞–º–∏–∫–∞", callback_data="material_keramika")],
        [InlineKeyboardButton(text="üü® –ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ (–æ–≤–∞–ª)", callback_data="material_metal_oval")],
        [InlineKeyboardButton(text="üü• –ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è)", callback_data="material_metal_pryam")],
        [InlineKeyboardButton(text="üî∑ –°–≤–æ—è —Ñ–æ—Ä–º–∞", callback_data="material_custom")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è:", reply_markup=keyboard)
    await state.set_state(OrderState.waiting_for_material)

# –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞
async def material_chosen(callback: types.CallbackQuery, state: FSMContext):
    material = callback.data.replace("material_", "")
    await state.update_data(material=material)
    await callback.answer()

    if material == "keramika":
        prices = KERAMIKA_PRICES
    elif material == "metal_oval":
        prices = METAL_OVAL_PRICES
    elif material == "metal_pryam":
        prices = METAL_PRYAM_PRICES
    else:
        await callback.message.answer("–§—É–Ω–∫—Ü–∏—è '—Å–≤–æ—è —Ñ–æ—Ä–º–∞' –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        await state.clear()
        return

    keyboard = create_size_keyboard(prices)
    await state.update_data(prices_dict=material)
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=keyboard)
    await state.set_state(OrderState.waiting_for_size)

# –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
async def size_chosen(callback: types.CallbackQuery, state: FSMContext):
    size = callback.data.replace("size_", "")
    data = await state.get_data()
    material = data.get("material")
    prices_key = data.get("prices_dict")

    if prices_key == "keramika":
        price = KERAMIKA_PRICES.get(size)
    elif prices_key == "metal_oval":
        price = METAL_OVAL_PRICES.get(size)
    elif prices_key == "metal_pryam":
        price = METAL_PRYAM_PRICES.get(size)
    else:
        price = None

    if price is None:
        await callback.message.answer("–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    retail = calculate_retail_price(price)
    await state.update_data(size=size, price=retail)
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n–ú–∞—Ç–µ—Ä–∏–∞–ª: {material}\n–†–∞–∑–º–µ—Ä: {size}\n–¶–µ–Ω–∞: {ret
