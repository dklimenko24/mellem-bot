import os
import logging
import math
import asyncio

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.state import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ----- –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

# ----- –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä -----
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ----- –û–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è -----
class OrderState(StatesGroup):
    waiting_for_material = State()
    waiting_for_size = State()

# ----- –°–ª–æ–≤–∞—Ä–∏ —Å –æ–ø—Ç–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ -----
KERAMIKA_PRICES = {
    "13x18": 1100,
    "15x20": 1400,
    "18x24": 2000,
    "20x30": 2700,
    "24x30": 3300,
    "30x40": 5000,
    "40x50": 13000,
    "40x60": 13300,
    "50x70": 17200,
    "50x90": 27000,
    "50x100": 32000,
    "60x20": 44000,
}

METAL_OVAL_PRICES = {
    "13x18": 850,
    "14x25": 950,
    "16x23": 1000,
    "18x24": 1100,
    "20x30": 1500,
    "24x30": 1700,
    "25x40": 2600,
    "30x40": 3500,
}

METAL_PRYAM_PRICES = {
    "13x18": 850,
    "15x20": 1050,
    "18x24": 1150,
    "20x30": 1550,
    "24x30": 1750,
    "30x40": 3600,
    "40x50": 14000,
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω—ã —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 30% –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 50 —Ä—É–±.
def calculate_retail_price(wholesale_price: int) -> int:
    retail = wholesale_price * 1.3
    return math.floor(retail / 50) * 50

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —Å–ª–æ–≤–∞—Ä—é —Ü–µ–Ω
def create_size_keyboard(prices_dict: dict) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup()
    for size, wholesale_price in prices_dict.items():
        retail_price = calculate_retail_price(wholesale_price)
        button_text = f"{size} ‚Äì {retail_price} —Ä—É–±."
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"size_{size}"))
    return keyboard

# ------------------- –•–µ–Ω–¥–ª–µ—Ä—ã -------------------

async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /start"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¶ –ö–µ—Ä–∞–º–∏–∫–∞", callback_data="material_keramika")],
        [InlineKeyboardButton(text="üü® –ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ (–æ–≤–∞–ª)", callback_data="material_metal_oval")],
        [InlineKeyboardButton(text="üü• –ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è)", callback_data="material_metal_pryam")],
        [InlineKeyboardButton(text="üî∑ –°–≤–æ—è —Ñ–æ—Ä–º–∞", callback_data="material_custom")]
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ñ–æ—Ç–æ–∫–µ—Ä–∞–º–∏–∫—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(OrderState.waiting_for_material)

async def material_chosen(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    material = callback.data.replace("material_", "")
    await state.update_data(material=material)
    await callback.answer()
    
    if material == "keramika":
        size_keyboard = create_size_keyboard(KERAMIKA_PRICES)
        await callback.message.answer(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: –∫–µ—Ä–∞–º–∏–∫–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
            reply_markup=size_keyboard
        )
        await state.update_data(prices_dict="keramika")
        await state.set_state(OrderState.waiting_for_size)
    elif material == "metal_oval":
        size_keyboard = create_size_keyboard(METAL_OVAL_PRICES)
        await callback.message.answer(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: –º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ (–æ–≤–∞–ª).\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
            reply_markup=size_keyboard
        )
        await state.update_data(prices_dict="metal_oval")
        await state.set_state(OrderState.waiting_for_size)
    elif material == "metal_pryam":
        size_keyboard = create_size_keyboard(METAL_PRYAM_PRICES)
        await callback.message.answer(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: –º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è).\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
            reply_markup=size_keyboard
        )
        await state.update_data(prices_dict="metal_pryam")
        await state.set_state(OrderState.waiting_for_size)
    elif material == "custom":
        await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è '–°–≤–æ–µ–π —Ñ–æ—Ä–º—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏!")
        await state.clear()
    else:
        await callback.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        await state.clear()

async def size_chosen(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    size = callback.data.replace("size_", "")
    data = await state.get_data()
    material = data.get("material", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    prices_dict_key = data.get("prices_dict")
    
    if prices_dict_key == "keramika":
        wholesale_price = KERAMIKA_PRICES.get(size)
    elif prices_dict_key == "metal_oval":
        wholesale_price = METAL_OVAL_PRICES.get(size)
    elif prices_dict_key == "metal_pryam":
        wholesale_price = METAL_PRYAM_PRICES.get(size)
    else:
        wholesale_price = None

    if wholesale_price:
        retail_price = calculate_retail_price(wholesale_price)
        price_info = f"{retail_price} —Ä—É–±."
    else:
        price_info = "N/A"

    await callback.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª: {material}\n–†–∞–∑–º–µ—Ä: {size}\n–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞: {price_info}\n\n"
        "–î–∞–ª—å—à–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–¥–ø–∏—Å–∏, —Ñ–æ–Ω–∞, —Ñ–æ—Ç–æ –∏ –ø—Ä–æ—á–µ–≥–æ."
    )
    await state.clear()

# ------------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ -------------------
def register_handlers(dp: Dispatcher):
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    dp.message.register(cmd_start, Command(commands=["start"]))

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_material
    dp.callback_query.register(
        material_chosen,
        F.data.startswith("material_"),
        StateFilter(OrderState.waiting_for_material)
    )

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_size
    dp.callback_query.register(
        size_chosen,
        F.data.startswith("size_"),
        StateFilter(OrderState.waiting_for_size)
    )

# ------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -------------------
async def main():
    logging.basicConfig(level=logging.INFO)
    register_handlers(dp)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
